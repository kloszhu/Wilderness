<#@ template language="C#" debug="True" hostSpecific="True"                           #>
<#@ output extension=".generated.cs"                                                  #>
<#@ include file="$(ProjectDir)LinqToDB.Templates\MultipleFiles.ttinclude"     #>
<#@ include file="$(ProjectDir)LinqToDB.Templates\LinqToDB.SqlServer.Tools.ttinclude" #>
<#@ include file="$(ProjectDir)LinqToDB.Templates\PluralizationService.ttinclude"     #>

<#//@ include file="$(ProjectDir)LinqToDB.Templates\LinqToDB.ttinclude"     #>
<#//@ include file="$(ProjectDir)LinqToDB.Templates\T4Model.ttinclude" #>

<#
	/*
		1. Create new *.tt file (e.g. MyDatabase.tt) in a folder where you would like to generate your data model
		   and copy content from this file to it. For example:

			MyProject
				DataModels
					MyDatabase.tt

		2. Modify the connection settings below to connect to your database. 

		3. Add connection string to the web/app.config file:

			<connectionStrings>
				<add name="MyDatabase" providerName="System.Data.SqlClient"
					connectionString="Data Source=.;Database=MyDatabase;User Id=User;Password=TestPassword;" />
			</connectionStrings>

		4. To access your database use the following code:

			using (var db = new MyDatabaseDB())
			{
				var q =
					from c in db.Customers
					select c;

				foreach (var c in q)
					Console.WriteLine(c.ContactName);
			}

		5. See more at https://github.com/linq2db/t4models

		If you need to use the Microsoft.SqlServer.Types namespace, install the Microsoft.SqlServer.Types nuget,
		and replace the following include at the top of this file:

			"$(ProjectDir)LinqToDB.Templates\LinqToDB.SqlServer.Tools.ttinclude"

		with

			"$(ProjectDir)LinqToDB.Templates\LinqToDB.SqlServer.SqlTypes.Tools.ttinclude"
	*/

 
 NamespaceName                 = "CommonService.LinqModel";       // Namespace of the generated classes.

DataContextName               = "CommonServiceDB";               //数据库文档名称，为空时数据库名称+DB DataContext class name. If null - database name + "DB".
//BaseDataContextClass          = null;               //数据库文档名称 Base DataContext class name. If null - LinqToDB.Data.DataConnection.
//GenerateConstructors          = false;               //数据库文档强制生成构造函数 Enforce generating DataContext constructors.
//DefaultConfiguration          = null;               //定义数据库 Defines default configuration for default DataContext constructor.

//BaseEntityClass               = "baseEnity";               //模型基类 Base Entity class name. If null - none.
//DatabaseName                  = null;               //数据表名称 Table database name - [Table(Database="DatabaseName")].
//GenerateDatabaseName          = false;              //总是生成数据库名称 Always generate table database name, even though DatabaseName is null.
IncludeDefaultSchema          = true;               //默认 Default schema name is generated - [Table(Database="Northwind", Schema="dbo", Name="Customers")]
//
OneToManyAssociationType      = "IEnumerable<{0}>"; //一对多 One To Many association type (for members only). Change it to "List<{0}>" if needed.
GenerateAssociations          = true;               //强制生成 Enforce generating associations as type members.
GenerateBackReferences        = true;               // Enforce generating backreference associations (affects both members and extensions).
GenerateAssociationExtensions = true;              // Enforce generating associations as extension methods. NB: this option does not affect GenerateAssociations. This will require linq2db 1.9.0 and above

ReplaceSimilarTables          = true;               // Replaces stored procedure result class names with similar to existing table class names.
GenerateFindExtensions        = true;               // Generates find extension methods based on PKs information.
IsCompactColumns              = true;               // If true, column compact view.
//
PluralizeClassNames                 = true;   // If true, pluralizes table class names.
SingularizeClassNames               = true;    // If true, singularizes table class names.
PluralizeDataContextPropertyNames   = true;    // If true, pluralizes DataContext property names.
SingularizeDataContextPropertyNames = true;   // If true, singularizes DataContex pProperty names.
//
GenerateDataTypes                   = true;   // If true, generates the DataType/Length/Precision/Scale properties of the Column attribute (unless overriden by the properties below).
//GenerateDataTypeProperty            = true;    // 这里报错If true, generates the DataType property of the Column attribute. If false, excludes generation on the DataType property even if GenerateDataTypes == true.
GenerateLengthProperty              = true;    // If true, generates the Length property of the Column attribute. If false, excludes generation on the Length property even if GenerateDataTypes == true.
GeneratePrecisionProperty           = true;    // If true, generates the Precision property of the Column attribute. If false, excludes generation on the Precision property even if GenerateDataTypes == true.
GenerateScaleProperty               = true;    // If true, generates the Scale property of the Column attribute. If false, excludes generation on the Scale property even if GenerateDataTypes == true.
GenerateDbTypes                     = true;   // If true, generates the DbType property of the Column attribute.
//
GenerateObsoleteAttributeForAliases = true;   // If true, generates [Obsolete] attribute for aliases.
IsCompactColumnAliases              = true;    // If true, column alias compact view.
//
NormalizeNames                      = true;   // convert some_name to SomeName for types and members
//
//GetSchemaOptions.ExcludedSchemas = new[] { "TestUser", "SYSSTAT" }; // Defines excluded schemas.
//GetSchemaOptions.IncludedSchemas = new[] { "TestUser", "SYS" };     // Defines only included schemas.
//
//GetSchemaOptions.ExcludedCatalogs = new[] { "TestUser", "SYSSTAT" }; // Defines excluded catalogs.
//GetSchemaOptions.IncludedCatalogs = new[] { "TestUser", "SYS" };     // Defines only included catalogs.
//
GetSchemaOptions.GetAssociationMemberName = key => "Association_" + key.MemberName;     // Defines custom naming logic for generated associations.
//
//// check GetSchemaOptions class for more options
//
Func<string, bool, string> ToValidName         = ToValidNameDefault;          // Defines function to convert names to valid (My_Table to MyTable) 
Func<string, bool, string> ConvertToCompilable = ConvertToCompilableDefault;  // Converts name to c# compatible. By default removes uncompatible symbols and converts result with ToValidName
//
Func<ForeignKey, string> GetAssociationExtensionSinglularName = GetAssociationExtensionSinglularNameDefault; // Gets singular method extension method name for association 
Func<ForeignKey, string> GetAssociationExtensionPluralName    = GetAssociationExtensionPluralNameDefault;    // Gets plural method extension method name for association 



LoadSqlServerMetadata(".", "mydb", "sa", "sa123456");

//	LoadSqlServerMetadata(".", "mydb"); // Integrated Security
//LoadSqlServerMetadata("MyDatabase");
//Server=119.23.61.137;Database=CommonDB0905;User ID=sa;Password=!QAZ2wsx#EDC;
	GenerateModel();
#>
